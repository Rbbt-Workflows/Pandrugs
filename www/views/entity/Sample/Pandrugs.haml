- sample = entity
- action_card = ActionCard.new do
  - input :drug_score_threshold, :float, "Drug score threshold", 0.5
  - input :gene_score_threshold, :float, "Gene score threshold", 0.3
  - input :cohort, :hidden, nil, entity.cohort

-# action_card.require :drug_score_threshold, :gene_score_threshold

- drug_score_threshold = 0.5 unless defined? drug_score_threshold and drug_score_threshold
- gene_score_threshold = 0.5 unless defined? gene_score_threshold and gene_score_threshold

- action_card.description do
  :markdown

    The table shows all the drugs that target affected genes in the sample, or
    for which the sample might have sensitivity or resistance based on them.
    The `Drug Score` is the strength of the association between the drug and
    the affected gene. The `Gene Score` measure the severity of the gene
    mutation, and considers the predicted damage on the gene as well as the
    importance of the gene itself.

    The graph show the more relevant associations (the thresholds can be change
    in the action parameters).  The genes are represented as circles. Approved
    drugs are represented by triangles and drugs in clinical trials are
    represented as squares. Green edges represent sensitivity to the drug and
    red arrows represent resistance. The size of the edge represents the `Drug
    Score` value. Click on the edge to display the associated information. Click
    on the gene to open the gene report.


    NOTE: Drugs associated with genes for are not filtered based on the cancer
    type for which they are originally prescribed.

= action_card_render action_card do
  - affected_genes = sample.get_genes :affected
  - broken_genes = sample.get_genes(:broken).name
  - organism = affected_genes.organism

  - tsv = sample.pandrugs

  - header "Gene Score", "NumericValue"
  = table :span => :long do
    - tsv

  - kb = @step.knowledge_base
  - kb.register :pandrugs, tsv
  - kb.get_index :pandrugs

  .ui.segment#plot(style='min-height:800px;')
    .window#plot_window(style='height:800px;')

  :deferjs
    var main_genes = #{affected_genes.name.to_json}

    var _scores = #{tsv.reorder("Ensembl Gene ID", ["Gene Score"], :zipped => true).to_single.to_json}
    var scores = {}

    forHash(_scores, function(k,v){
      if (v == "") scores[k] = 0.001
      else scores[k] = parseFloat(v) 
    })

    var _scores = #{tsv.reorder(:key, ["Drug Score"], :zipped => true).to_single.to_json}
    var drug_scores = {}

    forHash(_scores, function(k,v){
      if (v == "") drug_scores[k] = 0.001
      else drug_scores[k] = parseFloat(v) 
    })

    var _scores = #{tsv.reorder(:key, ["status"], :zipped => true).to_single.to_json}
    var drug_status_shape = {}

    forHash(_scores, function(k,v){
      switch(v){
        case "Approved":
          drug_status_shape[k] = 'triangle'
          break;
        case "Clinical trials":
          drug_status_shape[k] = 'square'
          break;
        case "Experimental":
          drug_status_shape[k] = 'pentagon'
          break;
        default :
          drug_status_shape[k] = 'octagon'
      }
    })



    m.sync([rbbt.plots.graph.parents('step:pandrugs', main_genes)]).then(function(res){
       var passociations = res[0]
       var good = []
       var dscores = passociations.info["Drug Score"]
       var gscores = passociations.info["Gene Score"]
       for (i in dscores){
         var ds = dscores[i]
         var gs = gscores[i]
         if (Math.abs(parseFloat(ds)) > #{drug_score_threshold} && Math.abs(parseFloat(gs)) > #{gene_score_threshold} )
          good.push(i)
       }

       for (k in passociations.info){
         var val = passociations.info[k]
         if (typeof val === 'object'){
           var new_val = []
           for (i in val){
             var v = val[i]
             if (good.includes(i))
              new_val.push(v)
           }
           passociations.info[k] = new_val
         }
       }

       for (k in passociations.aes){
         var val = passociations.aes[k]
         if (typeof val === 'object'){
           var new_val = []
           for (i in val){
             var v = val[i]
             if (good.includes(i))
              new_val.push(v)
           }
           passociations.aes[k] = new_val
         }
       }
      
      
      var codes = passociations.codes
      var new_codes = []
      for (i in codes){
        var x = codes[i]
        if (good.includes(i))
          new_codes.push(x)
      }
      passociations.codes = new_codes

      var model = {}
      model.associations = {}
      model.associations['step:pandrugs'] = passociations

      model.rules = []
      model.aes_rules = []
      model.rules.push({name: 'name', info: 'code', extract: function(s){ if (s.length > 30){ return s.slice(0,30) + '...'} else{ return s}} })
      model.rules.push({ name:'name', property: 'name' })
      model.rules.push({entity_type: "Gene", property: 'link', extract:function(x){return $(x).attr('href')} })
      model.rules.push({entity_type: "Gene", property: 'max_transcript_length', _extract: function(x){return Math.log(x)}  })

      model.aes_rules.push({aes: "label", name: 'name' })
      model.aes_rules.push({entity_type: "Gene", aes: "label", name: 'name' })
      model.aes_rules.push({entity_type: "Gene", aes: "url", name: 'link' })

      model.aes_rules.push({entity_type: "Gene", aes: "shape", value:'circle'})
      model.aes_rules.push({entity_type: "standard_drug_name", aes: "shape", name: 'code', mapper: 'map', mapper_obj: drug_status_shape})

      model.aes_rules.push({entity_type: "Gene", aes: "size", name: 'code', mapper: 'map', mapper_obj: scores})
      //model.aes_rules.push({entity_type: "Gene", aes: "borderWidth", name: 'code', mapper: 'map', mapper_obj: scores})
      //model.aes_rules.push({entity_type: "standard_drug_name", aes: "size", name: 'code', mapper: 'map', mapper_obj: drug_scores})
      //model.aes_rules.push({entity_type: "Gene", aes: "color", name: 'code', mapper: 'gradient', mapper_obj: scores})



      model.edge_rules = []
      model.edge_rules.push({name: "score", info:'Drug Score'})
      model.edge_rules.push({name: "abs_score", info:'Drug Score', extract: function(x){  return Math.abs(parseFloat(x.split(";;")[0])) } })
      model.edge_aes_rules = []

      model.edge_aes_rules.push({aes: "color", name:'score', mapper:'gradient'})
      model.edge_aes_rules.push({aes: "width", name:'abs_score'})

      //rbbt.plots.graph.view_cytoscapejs(model, $('#plot_window')).then(function(cy){
      //  console.log(cy)
      //})
      rbbt.plots.graph.view_cytoscape(model, $('#plot')).then(function(cy){
        console.log(cy)
      })
    })




